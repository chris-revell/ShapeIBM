
/*
void SecondaryForces(mat& fbb,const mat& xb,const int& Nb,const float& hb,const float& Spr,const int& connect) {
    float dl1;
    float dl2;
    float dr1;
    float dr2;
    float ndl;
    float ndr;
    float Lrest;
    if (connect==1) {
        Lrest=2*hb;
        for (int ii=0; ii<Nb; ii++) {
            if (ii==0) {
                dl1=xb(0,Nb-2)-xb(0,ii);
                dl2=xb(1,Nb-2)-xb(1,ii);
                dr1=xb(0,ii+2)-xb(0,ii);
                dr2=xb(1,ii+2)-xb(1,ii);
            } else if (ii==1) {
                dl1=xb(0,Nb-1)-xb(0,ii);
                dl2=xb(1,Nb-1)-xb(1,ii);
                dr1=xb(0,ii+2)-xb(0,ii);
                dr2=xb(1,ii+2)-xb(1,ii);
            } else if (ii==Nb-2) {
                dl1=xb(0,ii-2)-xb(0,ii);
                dl2=xb(1,ii-2)-xb(1,ii);
                dr1=xb(0,0)-xb(0,ii);
                dr2=xb(1,0)-xb(1,ii);
            } else if (ii==Nb-1) {
                dl1=xb(0,ii-2)-xb(0,ii);
                dl2=xb(1,ii-2)-xb(1,ii);
                dr1=xb(0,1)-xb(0,ii);
                dr2=xb(1,1)-xb(1,ii);
            } else {
                dl1=xb(0,ii-2)-xb(0,ii);
                dl2=xb(1,ii-2)-xb(1,ii);
                dr1=xb(0,ii+2)-xb(0,ii);
                dr2=xb(1,ii+2)-xb(1,ii);
            }
            ndl=sqrt(pow(dl1,2)+pow(dl2,2));
            ndr=sqrt(pow(dr1,2)+pow(dr2,2));
            fbb(0,ii)=Spr*(ndl-Lrest)*dl1/ndl+Spr*(ndr-Lrest)*dr1/ndr;
            fbb(1,ii)=Spr*(ndl-Lrest)*dl2/ndl+Spr*(ndr-Lrest)*dr2/ndr;
        }
    }
} // SecondaryForces
//--------------------------------------------------------------------//

//----------------------------------------------------------------------//
// define central forces between boundary points and the cell nucleus   //
// only half of all boundary points are connected to cell nucleus to    //
// allow the whole cell to grow                                         //
// Again Hookean forces with spring constant Spr                        //
// and equilibium radius len where len is the tyM_PIcal cell radius       //
//----------------------------------------------------------------------//
void CenterForces(mat& fbb,const mat& xb,const int& Nb,const float& cen,const float& len,const float& Spr,const int& connect){
    float dl1;
    float dl2;
    float ndl;
    float Lrest;

    if (connect==2){
        Lrest=len;
        for (int ii=0; ii<Nb/2; ii++){
            dl1=cen-xb(0,ii);
            dl2=cen-xb(1,ii);
            ndl=sqrt(pow(dl1,2)+pow(dl2,2));

            fbb(0,ii)=Spr*(ndl-Lrest)*dl1/ndl;
            fbb(1,ii)=Spr*(ndl-Lrest)*dl2/ndl;
        }
    }
} // function CenterForces
//--------------------------------------------------------------------//

